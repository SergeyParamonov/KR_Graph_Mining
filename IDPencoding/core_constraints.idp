vocabulary V{
  type t_var isa nat
  type graph
  invar(t_var)
  pattern_in(graph)
  extern vocabulary Vout
  type label
  type node isa nat
  node_label(graph, node, label)
  t_label(t_var,label)
  edge(graph, node, node)
  threshold:int
  partial f(graph,t_var):node
  t_edge(t_var,t_var)
	path(t_var,t_var)
}
theory T:V{
	 // frequency
   #{ graph : pattern_in(graph) } >= threshold. 
   // homomorphism definition
   pattern_in(g) & invar(x)  <=> ? y: y=f(g,x).
   //injectivy
   pattern_in(g) & invar(x) & invar(y) & x ~= y      => f(g, x) ~= f(g, y). 
   pattern_in(g) & invar(x) & invar(y) & t_edge(x,y) => edge(g,f(g,x), f(g,y)).
   pattern_in(g) & invar(x) & t_label(x,lx)          => node_label(g,f(g,x),lx).
  { 
   path(x,y) <- t_edge(x,y) & invar(x) & invar(y).
   path(y,x) <- path(x,y).
   path(x,y) <- ?z: path(x,z) & t_edge(z,y) & invar(y). 
  }
  !x y : x ~= y & invar(x) & invar(y) => path(x,y).
  // Cardinality constraint on the size of the query, replace NNN with number
  ?NNNx: invar(x).
  // *Nogoods* 
}
